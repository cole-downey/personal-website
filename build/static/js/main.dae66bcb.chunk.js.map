{"version":3,"sources":["components/header.js","containers/about-me/about-me-text.js","containers/about-me/aboutMe.js","App.js","serviceWorker.js","index.js"],"names":["StyledAppBar","styled","AppBar","Tab","Tabs","getValue","pages","value","forEach","element","url","window","location","pathname","index","NewStyledTabs","withStyles","indicator","backgroundColor","Header","props","position","Toolbar","Grid","xs","variant","centered","map","page","label","title","href","key","AboutMeText","BodyText","Typography","AboutMe","container","spacing","justify","alignItems","item","themeDark","createMuiTheme","palette","background","default","text","primary","cont","App","StylesProvider","injectFirst","theme","CssBaseline","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ouBAIA,IAAMA,EAAeC,YAAOC,IAAPD,CAAH,KAKAA,YAAOE,IAAPF,CAAH,KAQIA,YAAOG,IAAPH,CAAH,KAKhB,SAASI,EAASC,GAEhB,IAAIC,EAAQ,EAMZ,OALAD,EAAME,SAAQ,SAAAC,GACRA,EAAQC,MAAQC,OAAOC,SAASC,WAClCN,EAAQE,EAAQK,UAGbP,EAGT,IAAMQ,EAAgBC,YAAW,CAC/BC,UAAW,CACTC,gBAAiB,UAFCF,CAInBZ,KAsBYe,EApBA,SAACC,GACd,IAAMd,EAAQc,EAAMd,MACpB,OACE,kBAACN,EAAD,CAAcqB,SAAS,UACrB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,GAAI,IACR,kBAACT,EAAD,CACEU,QAAQ,YACRlB,MAAOF,EAASC,GAChBoB,UAAQ,GAEPpB,EAAMqB,KAAI,SAACC,GAAD,OACT,kBAACzB,EAAA,EAAD,CAAK0B,MAAOD,EAAKE,MAAOC,KAAMH,EAAKlB,IAAKsB,IAAKJ,EAAKd,gB,QC1BjDmB,EAzBE,6gE,wFCKjB,IAAMC,EAAWjC,YAAOkC,IAAPlC,CAAH,KAuBCmC,EAnBC,WACd,OACE,kBAACb,EAAA,EAAD,CAAMc,WAAS,EACbC,QAAS,EACTC,QAAQ,SACRC,WAAW,aACXhB,GAAI,IAEJ,kBAACD,EAAA,EAAD,CAAMkB,MAAI,EAACjB,GAAI,IACb,6BACA,kBAACU,EAAD,CAAUT,QAAQ,KAAKQ,GACvB,6BACA,6BACA,kBAACC,EAAD,CAAUT,QAAQ,KAAKQ,M,+CCXzBS,EAAYC,YAAe,CAC/BC,QAAS,CACPC,WAAY,CACVC,QAAS,WAEXC,KAAM,CACJC,QAAS,cAKT1C,EAAQ,CACZ,CACEI,IAAK,gBACLoB,MAAO,OACPhB,MAAO,EACPmC,KAAM,+BACL,CACDvC,IAAK,qBACLoB,MAAO,WACPhB,MAAO,EACPmC,KAAM,kBAAC,EAAD,OACL,CACDvC,IAAK,yBACLoB,MAAO,YACPhB,MAAO,EACPmC,KAAM,kBAAC,EAAD,OACL,CACDvC,IAAK,wCACLoB,MAAO,2BACPhB,MAAO,EACPmC,KAAM,kBAAC,EAAD,OACL,CACDvC,IAAK,uBACLoB,MAAO,UACPhB,MAAO,EACPmC,KAAM,kBAAC,EAAD,QAyBKC,MApBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAgBC,aAAW,GACzB,kBAAC,IAAD,CAAkBC,MAAOX,GACvB,kBAACY,EAAA,EAAD,MACA,kBAAC,EAAD,CAAQhD,MAAOA,IACf,kBAACiB,EAAA,EAAD,CAAMc,WAAS,EAACE,QAAQ,SAASf,GAAI,IACnC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGlB,EAAMqB,KAAI,SAACC,GAAD,OACT,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAM5B,EAAKlB,IAAKsB,IAAKJ,EAAKd,OAAQc,EAAKqB,eClDhDQ,QACW,cAA7B9C,OAAOC,SAAS8C,UAEe,UAA7B/C,OAAOC,SAAS8C,UAEhB/C,OAAOC,SAAS8C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dae66bcb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Tab, Tabs, Grid, withStyles } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledAppBar = styled(AppBar)`\r\n  background: linear-gradient(90deg, #FC466B 0%, #3F5EFB 100%);\r\n  padding: 1em;\r\n`;\r\n\r\nconst StyledTab = styled(Tab)`\r\n  && :hover {\r\n    color: #262626;\r\n  };\r\n  && :focus {\r\n    color: #262626;\r\n  }\r\n`;\r\nconst StyledTabs = styled(Tabs)`\r\n  && :indicator {\r\n    background-color: black;\r\n  }\r\n`;\r\nfunction getValue(pages) {\r\n  // iterates through pages list to find which value is current\r\n  var value = 0;\r\n  pages.forEach(element => {\r\n    if (element.url === window.location.pathname) {\r\n      value = element.index;\r\n    }\r\n  });\r\n  return value;\r\n}\r\n//tempory fix until I figure out how to change indicator color with styled components\r\nconst NewStyledTabs = withStyles({\r\n  indicator: {\r\n    backgroundColor: 'white',\r\n  },\r\n})(Tabs);\r\n\r\nconst Header = (props) => {\r\n  const pages = props.pages\r\n  return (\r\n    <StyledAppBar position=\"sticky\">\r\n      <Toolbar>\r\n        <Grid xs={12}>\r\n          <NewStyledTabs\r\n            variant=\"fullWidth\"\r\n            value={getValue(pages)}\r\n            centered\r\n          >\r\n            {pages.map((page) =>\r\n              <Tab label={page.title} href={page.url} key={page.index} />)}\r\n          </NewStyledTabs>\r\n        </Grid>\r\n      </Toolbar>\r\n    </StyledAppBar>\r\n  );\r\n}\r\n\r\nexport default Header;","const AboutMeText = `\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sapien est, condimentum in condimentum vel, \r\ninterdum vel sapien. Phasellus in dui arcu. Pellentesque tempor est nec ipsum varius, egestas fermentum lacus suscipit. \r\nNulla id lacus vulputate, fringilla metus quis, vulputate dui. Fusce nec felis id leo rutrum malesuada. \r\nNulla risus libero, egestas consequat est et, feugiat accumsan tellus. Praesent quis gravida nunc, \r\nluctus pharetra quam. Duis vitae aliquet eros. Ut ut tincidunt augue, quis fermentum ex. \r\nProin eu euismod est, eget mattis augue.\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. In bibendum finibus nisl, ut interdum eros convallis vitae. \r\nDonec gravida odio a justo maximus, non commodo ex ultrices. Nulla eget tincidunt lacus. Donec nunc odio, \r\nlobortis sed pretium eu, auctor eget nisl. Pellentesque in est dui. Aliquam quis maximus lectus, at imperdiet odio. \r\nNunc sed imperdiet odio. Cras eros ex, mattis sed mollis a, ullamcorper in elit. \r\nDonec nulla ligula, vulputate vitae sodales sit amet, pellentesque nec nisl. \r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ultricies ipsum et vestibulum pulvinar.\r\n\r\nNulla in volutpat leo. Nullam sollicitudin odio ac nulla porta facilisis. Praesent pulvinar aliquet nulla, \r\nnon gravida diam. Nullam sed maximus ex, at tincidunt felis. Aenean ac tempor nisi. Cras viverra, lacus vel suscipit mattis, \r\nante diam fermentum nulla, in lacinia purus felis posuere massa. Suspendisse porta urna tellus, ut sollicitudin mauris \r\neleifend et. Aliquam erat volutpat. Cras dictum ultrices magna a dapibus. Aenean suscipit vestibulum mauris nec tristique. \r\nIn hac habitasse platea dictumst. Fusce ut enim dignissim, accumsan ex ac, porta nibh.\r\n\r\nClass aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. \r\nPellentesque ut leo vitae nisi iaculis molestie sed ut odio. Maecenas fermentum, lorem non vulputate convallis, \r\neros orci placerat dui, a scelerisque augue nunc nec urna. Nam feugiat tincidunt orci.`;\r\n\r\nexport default AboutMeText;","import React from 'react';\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\nimport AboutMeText from './about-me-text';\r\nimport styled from 'styled-components';\r\n\r\nconst BodyText = styled(Typography)`\r\n  color: white;\r\n`;\r\n\r\nconst AboutMe = () => {\r\n  return (\r\n    <Grid container\r\n      spacing={6}\r\n      justify=\"center\"\r\n      alignItems=\"flex-start\"\r\n      xs={10}\r\n    >\r\n      <Grid item xs={12}>\r\n        <br />\r\n        <BodyText variant=\"p\">{AboutMeText}</BodyText>\r\n        <br />\r\n        <br />\r\n        <BodyText variant=\"p\">{AboutMeText}</BodyText>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default AboutMe;","import React from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport AboutMe from './containers/about-me/aboutMe';\nimport { StylesProvider, Grid, Box, MuiThemeProvider, createMuiTheme, CssBaseline } from '@material-ui/core';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nconst themeDark = createMuiTheme({\n  palette: {\n    background: {\n      default: \"#222222\"\n    },\n    text: {\n      primary: \"#ffffff\"\n    }\n  }\n});\n\nconst pages = [\n  {\n    url: \"/~coledowney/\",\n    title: \"Home\",\n    index: 0,\n    cont: <div />,\n  }, {\n    url: \"/~coledowney/about\",\n    title: \"About Me\",\n    index: 1,\n    cont: <AboutMe />,\n  }, {\n    url: \"/~coledowney/portfolio\",\n    title: \"Portfolio\",\n    index: 2,\n    cont: <AboutMe />,\n  }, {\n    url: \"/~coledowney/technical-qualifications\",\n    title: \"Technical Qualifications\",\n    index: 3,\n    cont: <AboutMe />,\n  }, {\n    url: \"/~coledowney/service\",\n    title: \"Service\",\n    index: 4,\n    cont: <AboutMe />,\n  },\n];\n\n// `/~coledowney${page.url}`\nfunction App() {\n  return (\n    <StylesProvider injectFirst>\n      <MuiThemeProvider theme={themeDark}>\n        <CssBaseline />\n        <Header pages={pages} />\n        <Grid container justify=\"center\" xs={12}>\n          <Router>\n            <Switch>\n              {pages.map((page) => (\n                <Route exact path={page.url} key={page.index}>{page.cont}</Route>\n              ))}\n            </Switch>\n          </Router>\n        </Grid>\n      </MuiThemeProvider>\n    </StylesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}