{"version":3,"sources":["components/Header.js","components/Typography.js","containers/about-me/about-me-text.js","containers/about-me/index.js","containers/about-me/AboutMe.js","containers/portfolio/index.js","containers/portfolio/Portfolio.js","containers/qualifications/Qualifications.js","containers/qualifications/index.js","containers/service-page/index.js","containers/service-page/Service.js","App.js","serviceWorker.js","index.js"],"names":["StyledAppBar","styled","AppBar","Tab","Tabs","getValue","pages","value","forEach","element","url","window","location","hash","index","NewStyledTabs","withStyles","indicator","backgroundColor","Title","Typography","StyledTitleButton","ButtonBase","Header","props","useState","setValue","position","Toolbar","Grid","container","justify","item","paragraph","component","xs","variant","useMediaQuery","centered","scrollButtons","onClick","map","page","label","title","to","key","Link","BodyText","AboutMeText","AboutMe","spacing","alignItems","Portfolio","StyledGrid","Qualifications","src","width","height","frameBorder","Service","themeDark","createMuiTheme","palette","background","default","text","primary","secondary","cont","App","StylesProvider","injectFirst","theme","CssBaseline","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.854d0ea4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Tab,\r\n  Tabs,\r\n  Grid,\r\n  withStyles,\r\n  Typography,\r\n  ButtonBase,\r\n  useMediaQuery\r\n} from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst StyledAppBar = styled(AppBar)`\r\n  background: linear-gradient(90deg, #FC466B 0%, #3F5EFB 100%);\r\n  padding: 1em;\r\n`;\r\n\r\nconst StyledTab = styled(Tab)`\r\n  && :hover {\r\n    color: #262626;\r\n  };\r\n  && :focus {\r\n    color: #262626;\r\n  }\r\n`;\r\nconst StyledTabs = styled(Tabs)`\r\n  && :indicator {\r\n    background-color: black;\r\n  }\r\n`;\r\nfunction getValue(pages) {\r\n  // iterates through pages list to find which value is current\r\n  var value = 0;\r\n  pages.forEach(element => {\r\n    if (`#${element.url}` === window.location.hash) {\r\n      value = element.index;\r\n    }\r\n  });\r\n  return value;\r\n}\r\n//tempory fix until I figure out how to change indicator color with styled components\r\nconst NewStyledTabs = withStyles({\r\n  indicator: {\r\n    backgroundColor: 'white',\r\n  },\r\n})(Tabs);\r\n\r\nconst Title = styled(Typography)`\r\n  padding-left: 0.5em;\r\n  padding-right:0.5em;\r\n  padding-bottom: 0.15em;\r\n`;\r\n\r\nconst StyledTitleButton = styled(ButtonBase)`\r\n  font-weight: 100;\r\n  font-size: 3em;\r\n  color: #222222;\r\n  border: 3px solid #222222;\r\n`;\r\n\r\nconst Header = (props) => {\r\n  const pages = props.pages;\r\n  const [value, setValue] = useState(getValue(pages));\r\n  const handleClick = () => {\r\n    setValue(getValue(pages));\r\n  };\r\n  return (\r\n    <StyledAppBar position=\"sticky\">\r\n      <Toolbar>\r\n        <Grid container justify=\"center\">\r\n          <Grid item>\r\n            <Title paragraph component={StyledTitleButton}>Cole Downey</Title>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <NewStyledTabs\r\n              variant={useMediaQuery('(min-width:800px)') ? \"fullWidth\" : \"scrollable\"}\r\n              value={value}\r\n              centered\r\n              scrollButtons=\"on\"\r\n              onClick={handleClick}\r\n            >\r\n              {pages.map((page) =>\r\n                <Tab label={page.title} to={page.url} key={page.index} component={Link} />)}\r\n            </NewStyledTabs>\r\n          </Grid>\r\n        </Grid>\r\n      </Toolbar>\r\n    </StyledAppBar>\r\n  );\r\n}\r\n\r\nexport default Header;","import { Typography } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nexport const BodyText = styled(Typography)`\r\n  color: white;\r\n  font-size: 1.5rem;\r\n  font-weight: 100;\r\n  margin-top: 1em;\r\n`;","// I will def structure text blocks better later\r\nconst AboutMeText = [\r\n    \"My name is Cole Downey, and I am a junior at Texas A&M, class of ’22, pursuing a Computer Science major and a Video Game Development and Design minor. I was born in Denver, Colorado, but grew up in Boise, Idaho. I went to a small IB school with a graduating class size of 59. In high school I played ultimate frisbee and raced in mountain biking and skiing, although those hobbies haven’t followed me to Texas (no mountains here). My favorite hobbies are longboarding, skiing, playing music (ukulele and piano), and playing/creating video games.\",\r\n    \"My family consists of me, my dad, my mom, and my younger twin brothers: Gus and Luke. My dad is pilot, retired from the Air Force, currently flying commercial at United Airlines. My mom is a CPA who is currently a stay at home mom and also works on the board for my old high school. Gus and Luke are seniors at the same school I graduated from, and also like to mountain bike and ski.\",\r\n    \"After graduating, I would like to work in the video game industry, at least to some extent. I’m currently still deciding if I want to do something like software engineering as my main career and do some indie game dev on the side, or if I want to commit to game dev as my full career. I would prefer to work for a mid-sized game studio, somewhere between a AAA studio and indie studio, although that preference might change before I graduated. Some of my favorite studios and also my top choices to work for are Respawn, Hopoo, Nintendo, and CD Projekt Red. If I end up pursuing the software development route, my dream job would be to work at Spotify or Google.\"\r\n];\r\n\r\nexport default AboutMeText;","import AboutMe from './AboutMe';\r\nexport default AboutMe;","import React from 'react';\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\nimport { BodyText } from '../../components/Typography';\r\nimport AboutMeText from './about-me-text';\r\nimport styled from 'styled-components';\r\n\r\nconst AboutMe = () => {\r\n  return (\r\n    <Grid container\r\n      item\r\n      spacing={6}\r\n      justify=\"center\"\r\n      alignItems=\"flex-start\"\r\n      xs={10}\r\n    >\r\n      <Grid item xs={12}>\r\n        <BodyText variant=\"h6\">\r\n          Note: this section will go the About Me page when the header links are active, for now it will go here\r\n        </BodyText>\r\n        {AboutMeText.map((paragraph) => (\r\n          <BodyText variant=\"p\" paragraph>{paragraph}</BodyText>\r\n        ))}\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default AboutMe;","import Portfolio from './Portfolio';\r\n\r\nexport default Portfolio;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { BodyText } from '../../components/Typography';\r\n\r\nconst Portfolio = () => {\r\n    return (\r\n        <Grid container\r\n            spacing={6}\r\n            justify=\"center\"\r\n            alignItems=\"flex-start\"\r\n            xs={10}\r\n        >\r\n            <Grid item xs={12}>\r\n                <BodyText variant=\"p\" paragraph>\r\n                    {window.location.hash}\r\n                </BodyText>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Portfolio;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\n// Note: if I can figure out how to work react-pdf with google docs, this would be better than the iframe\r\n// import samplePDF from '../../assets/sample.pdf';\r\n// import { Document, Page, pdfjs } from 'react-pdf';\r\n// const onlinePDF = 'https://cors-anywhere.herokuapp.com/https://drive.google.com/file/d/1ZpaVx2YLMEfQPALeClalHtMp_0NvAts_/preview';\r\n// pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nconst StyledGrid = styled(Grid)`\r\n    margin-top: 2.5em;\r\n`;\r\nconst Qualifications = () => {\r\n    return (\r\n        <Grid container\r\n            item\r\n            spacing={6}\r\n            justify=\"center\"\r\n            alignItems=\"flex-start\"\r\n            xs={10}\r\n        >\r\n            <StyledGrid item>\r\n                <iframe src=\"https://drive.google.com/file/d/1ZpaVx2YLMEfQPALeClalHtMp_0NvAts_/preview\" width=\"800\" height=\"1040\" frameBorder=\"0\"></iframe>\r\n            </StyledGrid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Qualifications;","import Qualifications from './Qualifications';\r\n\r\nexport default Qualifications;","import Service from './Service';\r\n\r\nexport default Service;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { BodyText } from '../../components/Typography';\r\n\r\nconst Service = () => {\r\n    return (\r\n        <Grid container\r\n            spacing={6}\r\n            justify=\"center\"\r\n            alignItems=\"flex-start\"\r\n            xs={10}\r\n        >\r\n            <Grid item xs={12}>\r\n                <BodyText variant=\"p\" paragraph>\r\n                    This is my service page.\r\n                </BodyText>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Service;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport AboutMe from './containers/about-me';\nimport Portfolio from './containers/portfolio';\nimport Qualifications from './containers/qualifications';\nimport Service from './containers/service-page';\nimport { StylesProvider, Grid, MuiThemeProvider, createMuiTheme, CssBaseline } from '@material-ui/core';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nconst themeDark = createMuiTheme({\n  palette: {\n    background: {\n      default: \"#222222\"\n    },\n    text: {\n      primary: \"#ffffff\",\n      secondary: \"#222222\"\n    }\n  }\n});\n\n//const basePage = process.env.PUBLIC_URL;\nconst pages = [\n  {\n    url: '/',\n    title: \"Home\",\n    index: 0,\n    cont: AboutMe,\n  }, {\n    url: '/about',\n    title: \"About Me\",\n    index: 1,\n    cont: AboutMe,\n  }, {\n    url: '/portfolio',\n    title: \"Portfolio\",\n    index: 2,\n    cont: Portfolio,\n  }, {\n    url: '/qualifications',\n    title: \"Qualifications\",\n    index: 3,\n    cont: Qualifications,\n  }, {\n    url: '/service',\n    title: \"Service\",\n    index: 4,\n    cont: Service,\n  },\n];\n\n// `/~coledowney${page.url}`\nfunction App() {\n  return (\n    <StylesProvider injectFirst>\n      <MuiThemeProvider theme={themeDark}>\n        <CssBaseline />\n        <Router>\n          <Header pages={pages} />\n          <Grid container justify=\"center\">\n            <Switch>\n              {pages.map((page) => (\n                <Route exact path={page.url} key={page.index} component={page.cont} />\n              ))}\n            </Switch>\n          </Grid>\n        </Router>\n      </MuiThemeProvider>\n    </StylesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}